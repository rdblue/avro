<?xml version="1.0" encoding="UTF-8"?>
<!--
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.apache</groupId>
    <artifactId>apache</artifactId>
    <version>8</version>
  </parent>

  <groupId>org.apache.avro</groupId>
  <artifactId>avro-parent</artifactId>
  <version>1.5.0-SNAPSHOT</version>
  <packaging>pom</packaging>

  <name>Apache Avro Parent</name>
  <url>http://avro.apache.org</url>
  <description>Avro parent pom</description>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <paranamer-version>2.3</paranamer-version>
    <slf4j-version>1.5.11</slf4j-version>
  </properties>

  <issueManagement>
    <system>jira</system>
    <url>https://issues.apache.org/jira/browse/AVRO</url>
  </issueManagement>

  <build>
    <!-- defines the default plugin configuration that all child projects inherit 
      from. Like dependencyManagement, this provides configuration, version, and other 
      parameters if the plugins are used by child projects -->
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>2.3.2</version>
          <configuration>
            <source>1.6</source>
            <target>1.6</target>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-jar-plugin</artifactId>
          <version>2.3.1</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.7.1</version>
          <configuration>
            <includes>
              <!-- Avro naming convention for JUnit tests -->
              <include>**/Test**</include>
            </includes>
            <excludes>
              <!-- A few innner classes are not to be tested -->
              <exclude>**/*$*</exclude>
              <!-- exclude the generated classes under apache.avro.test, some of 
                these match **/Test** and are not JUnit tests -->
              <exclude>**/apache/avro/test/**</exclude>
            </excludes>
            <enableAssertions>false</enableAssertions>
            <!-- some IPC tests hang if not run in a separate JVM -->
            <forkMode>always</forkMode>
            <!-- TestSpecificCompiler instantiates a Java compiler to test output results, 
                 this does not work with a manifest-only-jar to set the classpath for the javac.
                 This may cause problems on some platforms.
                 See http://maven.apache.org/plugins/maven-surefire-plugin/examples/class-loading.html
                 for more information. -->
            <useManifestOnlyJar>false</useManifestOnlyJar>
            <!-- configures unit test standard error and standard out to go to a file per test
                 rather than the console. -->
            <redirectTestOutputToFile>true</redirectTestOutputToFile>
            <systemPropertyVariables>
              <test.dir>target/</test.dir>
            </systemPropertyVariables>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-checkstyle-plugin</artifactId>
          <version>2.6</version>
          <configuration>
            <configLocation>checkstyle.xml</configLocation>
          </configuration>
          <!-- Runs by default in the verify phase  (mvn verify or later in the build cycle) 
               the 'check' goal will fail the build if it does not pass.  "mvn checkstyle:check"
               will do this alone, or "mvn checkstyle:checkstyle" will report but not break  -->
          <executions>
            <execution>
              <id>checkstyle-check</id>
              <phase>test</phase>
              <goals>
                <goal>check</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </pluginManagement>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
      </plugin>
    </plugins>
  </build>

  <reporting>
  </reporting>

  <!-- dependencyManagement can be used to define dependency versions, scopes, and 
    excludes to be shared by child projects. Child projects will not inherit these dependencies, 
    rather they inherit the properties of the below dependencies (such as version) if 
    the dependency is specified in the child. -->
  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.codehaus.jackson</groupId>
        <artifactId>jackson-mapper-asl</artifactId>
        <version>1.4.2</version>
        <scope>compile</scope>
      </dependency>
      <dependency>
        <groupId>com.thoughtworks.paranamer</groupId>
        <artifactId>paranamer</artifactId>
        <version>${paranamer-version}</version>
        <scope>compile</scope>
      </dependency>
      <dependency>
        <groupId>org.apache.velocity</groupId>
        <artifactId>velocity</artifactId>
        <version>1.6.4</version>
        <scope>compile</scope>
      </dependency>
      <dependency>
        <groupId>org.mortbay.jetty</groupId>
        <artifactId>jetty</artifactId>
        <version>6.1.22</version>
        <scope>compile</scope>
      </dependency>
      <dependency>
        <groupId>org.jboss.netty</groupId>
        <artifactId>netty</artifactId>
        <version>3.2.1.Final</version>
        <scope>compile</scope>
      </dependency>
      <dependency>
        <groupId>net.sf.jopt-simple</groupId>
        <artifactId>jopt-simple</artifactId>
        <version>3.2</version>
        <scope>compile</scope>
      </dependency>
      <dependency>
        <groupId>org.apache.hadoop</groupId>
        <artifactId>hadoop-core</artifactId>
        <version>0.20.2</version>
        <scope>compile</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <!-- dependencies defines dependencies that all child projects share. Child projects 
    will inherit these dependencies directly, and can opt out if necessary with <excludes> -->
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.8.1</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>${slf4j-version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-simple</artifactId>
      <version>${slf4j-version}</version>
      <optional>true</optional>
    </dependency>
  </dependencies>

  <!-- extra repositories besides the default Maven central and any configured by 
    the local user's environment. -->
  <repositories>
    <repository>
      <id>jboss-public-repository</id>
      <name>JBoss Public Maven Repository</name>
      <url>http://repository.jboss.org/nexus/content/groups/public/</url>
      <layout>default</layout>
    </repository>
  </repositories>

  <modules>
    <module>avro</module>
    <module>compiler</module>
    <module>maven-plugin</module>
    <module>ipc</module>
    <module>tools</module>
    <module>mapred</module>
  </modules>
</project>
